name: Terraform AKS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choice the environment (workspace)"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

permissions:
  id-token: write
  contents: read

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.7

      - name: Azure Login action
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
          enable-AzPSModule: true

      - name: Create backend-config.tfbackend
        run: |
          cat > backend-config.tfbackend <<EOL
          resource_group_name  = "${{ secrets.AZURE_BACKEND_RG }}"
          storage_account_name = "${{ secrets.AZURE_BACKEND_STORAGE }}"
          container_name       = "${{ secrets.AZURE_BACKEND_CONTAINER }}"
          key                  = "aks-${{ github.event.inputs.environment }}.tfstate"
          sas_token            = "${{ secrets.AZURE_SAS_TOKEN }}"
          EOL

      - name: Terraform Init
        run: terraform -chdir=iac init -backend-config="../backend-config.tfbackend"

      - name: Select/Create Workspace
        run: |
          terraform -chdir=iac workspace select ${{ github.event.inputs.environment }} || \
          terraform -chdir=iac workspace new ${{ github.event.inputs.environment }}

      - name: Terraform Validate
        run: terraform -chdir=iac validate

      - name: Terraform Plan
        run: terraform -chdir=iac plan -var-file=../config/${{ github.event.inputs.environment }}.tfvars -out=${{ github.event.inputs.environment }}.tfplan

    # Working!!
    #   - name: tfsec (IaC Security Scan)
    #     uses: aquasecurity/tfsec-action@v1.0.3
    #     with:
    #       working_directory: iac

      - name: Setup Infracost CLI
        uses: infracost/actions/setup@v2
        with:
            api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Infracost Breakdown
        run: |
            infracost breakdown \
            --path iac \
            --terraform-var-file ../config/${{ github.event.inputs.environment }}.tfvars \
            --usage-file infracost-usage.yml \
            --format table

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.environment }}.tfplan
          path: iac

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: terraform-plan
    if: github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'production'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.7

      - name: Azure Login action
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
          enable-AzPSModule: true

      - name: Criar backend-config.tfbackend
        run: |
          cat > backend-config.tfbackend <<EOL
          resource_group_name  = "${{ secrets.AZURE_BACKEND_RG }}"
          storage_account_name = "${{ secrets.AZURE_BACKEND_STORAGE }}"
          container_name       = "${{ secrets.AZURE_BACKEND_CONTAINER }}"
          key                  = "aks-${{ github.event.inputs.environment }}.tfstate"
          sas_token            = "${{ secrets.AZURE_SAS_TOKEN }}"
          EOL

      - name: Terraform Init
        run: terraform -chdir=iac init -backend-config=../backend-config.tfbackend

      - name: Select Workspace
        run: terraform -chdir=iac workspace select ${{ github.event.inputs.environment }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.inputs.environment }}.tfplan
          path: iac

      - name: Terraform Apply
        run: terraform -chdir=iac apply -auto-approve ${{ github.event.inputs.environment }}.tfplan
